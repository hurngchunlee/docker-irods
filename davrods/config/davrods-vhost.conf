# davrods-vhost.conf
#
# davrods is a mod_dav WebDAV provider. Configuration directives for davrods
# should be placed in a <Location> block.
#
# Below we provide an example vhost configuration that enables davrods using
# its default options.
#

Listen 443 https

<VirtualHost *:443>

    # Enter your server name here.
    ServerName davrods

    # NB: Some webdav clients expect the server to implement webdav at the root
    # location (they execute an OPTIONS request to verify existence of webdav
    # protocol support).

    <Location />

        # Options needed to enable davrods. {{{
        # =================================

        # Disable built-in directory listings.
        DirectoryIndex disabled

        # Restrict access to authenticated users.
        AuthType Basic
        Require valid-user

        # The realm name that will be shown to clients upon authentication
        AuthName DAV

        # Use the 'irods' HTTP basic authentication provider, implemented by
        # davrods. This provider is used for setting up the iRODS connection,
        # and is therefore required for davrods to function.
        AuthBasicProvider irods

        # The DAV provider for this location.
        #
        # davrods implements multiple dav providers, use either:
        # - davrods-nolocks:                 WebDAV class 1 provider, no support for locking
        # - davrods-locallock (recommended): WebDAV class 2 provider, uses a DBM lock database local to this webserver
        #
        Dav davrods-locallock

        # }}}

        # davrods configuration directives. {{{
        # =================================

        # Location of the iRODS environment file that specifies the iRODS
        # client configuration used by davrods.
        #
        # Note: When options in the iRODS environment file overlap with Davrods
        # configuration directives, as with the host, port, and zone of the
        # iRODS server, the values specified in the iRODS environment file are
        # NOT used.
        #
        DavRodsEnvFile  /etc/httpd/irods/irods_environment.json

        # The following options can be used to customize davrods for your environment.
        # These options and their default values are provided below.
        # Having these directives commented out has the effect of enabling
        # the listed default option.

        # Hostname and port of the iRODS server to connect to.
        #
        DavRodsServer icat 1247

        # Data grid zone id of the iRODS server.
        #
        DavRodsZone tempZone

        # Authentication type to use when connecting to iRODS.
        #
        # Supported authentication types are 'Native' and 'Pam'.
        # ('Native' corresponds to what was formerly called 'Standard' auth in iRODS).
        #
        #DavRodsAuthScheme Pam
        DavRodsAuthScheme Native

        # iRODS default resource to use for file uploads.
        #
        # Leave this empty to let the server decide.
        #
        #DavRodsDefaultResource ""

        # Exposed top collection of iRODS.
        #
        # Note that the collection chosen MUST be readable for all users,
        # otherwise they will experience problems when mounting the drive.
        # For example, if you set it to "Home", then as a rodsadmin user
        # execute the icommand: ichmod read public /zone-name/home
        #
        # Davrods accepts the following values for exposed-root:
        # - 'Zone'      (collection /zone-name)
        # - 'Home'      (collection /zone-name/home)
        # - 'User'      (collection /zone-name/home/logged-in-username)
        # - full-path   (named collection, must be absolute path, starts with /)
        #
        DavRodsExposedRoot User

        # Size of the buffers used for file transfer to/from the iRODS server.
        #
        # The default values optimize performance for regular configurations.
        # The Tx buffer is used for transfer to iRODS (PUT), while the Rx
        # buffer is used for transfer from iRODS (GET).
        # Buffer sizes lower than 1024K will lead to decreased file transfer performance.
        #
        # The buffer sizes are specified as a number of kibibytes ('1' means 1024 bytes).
        # We use 4 MiB transfer buffers by default.
        #
        #DavRodsTxBufferKbs     4096
        #DavRodsRxBufferKbs     4096

        # Optionally davrods can support rollback for aborted uploads. In this scenario
        # a temporary file is created during upload and upon succesful transfer this
        # temporary file is renamed to the destination filename.
        # NB: Please note that the use of temporary files may conflict with your iRODS
        # data policies (e.g. a acPostProcForPut would act upon the temporary filename).
        # Valid values for this option are 'Yes' and 'No'.
        #
        #DavRodsTmpfileRollback No

        # When using the davrods-locallock DAV provider (see the 'Dav'
        # directive above), this option can be used to set the location of the
        # lock database.
        #
        #DavRodsLockDB          /var/lib/davrods/lockdb_locallock

    </Location>

    # !!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++!!
    # !! Don't change the configurations below unless you know what you are doing. !!
    # !!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++!!
    # Use separate log files for the SSL virtual host; note that LogLevel
    # is not inherited from httpd.conf.
    ErrorLog logs/ssl_error_log
    TransferLog logs/ssl_access_log
    LogLevel warn

    #   SSL Engine Switch:
    #   Enable/Disable SSL for this virtual host.
    SSLEngine on

    #   SSL Protocol support:
    # List the enable protocol levels with which clients will be able to
    # connect.  Disable SSLv2 access by default:
    #SSLProtocol all -SSLv2
    SSLProtocol all -SSLv2 -SSLv3

    #   SSL Cipher Suite:
    #   List the ciphers that the client is permitted to negotiate.
    #   See the mod_ssl documentation for a complete list.
    #SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5:!SEED:!IDEA
    SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5:!SEED:!IDEA:!RC4
    SSLHonorCipherOrder on

    #   Speed-optimized SSL Cipher configuration:
    #   If speed is your main concern (on busy HTTPS servers e.g.),
    #   you might want to force clients to specific, performance
    #   optimized ciphers. In this case, prepend those ciphers
    #   to the SSLCipherSuite list, and enable SSLHonorCipherOrder.
    #   Caveat: by giving precedence to RC4-SHA and AES128-SHA
    #   (as in the example below), most connections will no longer
    #   have perfect forward secrecy - if the server's key is
    #   compromised, captures of past or future traffic must be
    #   considered compromised, too.
    #SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:MEDIUM:!aNULL:!MD5
    #SSLHonorCipherOrder on

    #   Server Certificate:
    # Point SSLCertificateFile at a PEM encoded certificate.  If
    # the certificate is encrypted, then you will be prompted for a
    # pass phrase.  Note that a kill -HUP will prompt again.  A new
    # certificate can be generated using the genkey(1) command.
    SSLCertificateFile /etc/httpd/irods/server.crt

    #   Server Private Key:
    #   If the key is not combined with the certificate, use this
    #   directive to point at the key file.  Keep in mind that if
    #   you've both a RSA and a DSA private key you can configure
    #   both in parallel (to also allow the use of DSA ciphers, etc.)
    SSLCertificateKeyFile /etc/httpd/irods/server.key

    #   Server Certificate Chain:
    #   Point SSLCertificateChainFile at a file containing the
    #   concatenation of PEM encoded CA certificates which form the
    #   certificate chain for the server certificate. Alternatively
    #   the referenced file can be the same as SSLCertificateFile
    #   when the CA certificates are directly appended to the server
    #   certificate for convinience.
    SSLCertificateChainFile /etc/httpd/irods/server-ca-chain.crt

    #   Certificate Authority (CA):
    #   Set the CA certificate verification path where to find CA
    #   certificates for client authentication or alternatively one
    #   huge file containing all of them (file must be PEM encoded)
    SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt

    #   SSL Protocol Adjustments:
    #   The safe and default but still SSL/TLS standard compliant shutdown
    #   approach is that mod_ssl sends the close notify alert but doesn't wait for
    #   the close notify alert from client. When you need a different shutdown
    #   approach you can use one of the following variables:
    #   o ssl-unclean-shutdown:
    #     This forces an unclean shutdown when the connection is closed, i.e. no
    #     SSL close notify alert is send or allowed to received.  This violates
    #     the SSL/TLS standard but is needed for some brain-dead browsers. Use
    #     this when you receive I/O errors because of the standard approach where
    #     mod_ssl sends the close notify alert.
    #   o ssl-accurate-shutdown:
    #     This forces an accurate shutdown when the connection is closed, i.e. a
    #     SSL close notify alert is send and mod_ssl waits for the close notify
    #     alert of the client. This is 100% SSL/TLS standard compliant, but in
    #     practice often causes hanging connections with brain-dead browsers. Use
    #     this only for browsers where you know that their SSL implementation
    #     works correctly.
    #   Notice: Most problems of broken clients are also related to the HTTP
    #   keep-alive facility, so you usually additionally want to disable
    #   keep-alive for those clients, too. Use variable "nokeepalive" for this.
    #   Similarly, one has to force some clients to use HTTP/1.0 to workaround
    #   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
    #   "force-response-1.0" for this.
    BrowserMatch "MSIE [2-5]" \
         nokeepalive ssl-unclean-shutdown \
         downgrade-1.0 force-response-1.0

    #   Per-Server Logging:
    #   The home of a custom SSL log file. Use this when you want a
    #   compact non-error SSL logfile on a virtual host basis.
    CustomLog logs/ssl_request_log \
              "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

</VirtualHost>
